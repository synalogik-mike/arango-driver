res$queryResult_2
res <- searchByTitle(city="Livorno")
res$queryResult_0
knewdb
spring-demo <- conn %>% database(name="spring-demo")
spring_demo <- conn %>% database(name="spring-demo")
source('~/arango-driver/R/arango_aql.R')
searchByTitle <- conn %>% aql("FOR e IN employee FILTER e.birthplace==@city RETURN e")
searchUserByLocation <- spring_demo %>% aql("FOR e IN user FILTER e.location==@location RETURN e")
res <- searchUserByLocation(location = "Roma")
res$queryResult_0
res$queryResult_1
res <- searchUserByLocation()
library(aRangodb)
library(aRangodb)
library(aRangodb)
library(aRangodb)
library(aRangodb)
library(aRangodb)
source('~/arango-driver/R/arango_documents.R')
library(aRangodb)
library(aRangodb)
library(aRangodb)
library(aRangodb)
library(aRangodb)
is.numeric(2.12221)
is.boolean(2.12221)
is.bool(2.12221)
is.logical(TRUE)
is.logical(FALSE)
is.logical(1)
is.logical(0)
is.numeric(1)
is.numeric(1.2)
is.numeric(1.p)
is.numeric("1.p")
test_ellipsis <- function(...){return(list(...))}
arguments <- test_ellipsis(qty>0)
arguments <- test_ellipsis(qty=0)
arguments
arguments <- test_ellipsis(qty==0)
`.>` <- function(x, y) {
return(names(x)[1], toString(y))
}
`.>` <- function(x, y) {
return(
paste0(names(x)[1],">",toString(y))
)
}
c .> 3
c %.>% 3
c `.>` 3
"c" .> 3
"c" `.>` 3
`%lt%` <- function(x, y) {
return(
paste0(names(x)[1],">",toString(y))
)
}
c %lt% 3
`%lt%` <- function(x, y) {
return(
paste0(toString(x),">",toString(y))
)
}
c %lt% 3
`%lt%` <- function(x, y) {
return(
paste0(get(x),">",toString(y))
)
}
c %lt% 3
"c" `.>` 3
`%lt%` <- function(...) {
args <- list(...)
return(
paste0(names(args[1]),"<",toString(args[2]))
)
}
c %lt% 3
`%lt%` <- function(...) {
args <- list(...)
print(args)
return(
paste0(names(args[1]),"<",toString(args[2]))
)
}
c %lt% 3
`%lt%` <- function(...) {
args <- list(...)
print(args)
return(
paste0(args[1],"<",toString(args[2]))
)
}
c %lt% 3
.Primitive("c")
`names<-`(.Primitive("c"))
names(.Primitive("c"))
`%lt%` <- function(...) {
args <- c(...)
print(args)
return(
paste0(args[1],"<",toString(args[2]))
)
}
c %lt% 3
`.<` <- function(expr, value) {
return(paste0(substitute(expr),"<",toString(value)))
}
c .< 3
.<(c,3)
`%lt%` <- function(expr, value) {
return(paste0(substitute(expr),"<",toString(value)))
}
c %lt% 3
library(aRangodb)
library(aRangodb)
library(aRangodb)
library(aRangodb)
library(aRangodb)
library(aRangodb)
library(aRangodb)
evaluate_promise("test_promise=2")
library(aRangodb)
remlist <- function(...){
return(list(...))
}
remlist(ty="n", k=0, ll %lt% 2, l1 %lt% 2)
unlist(remlist(ty="n", k=0, ll %lt% 2, l1 %lt% 2))
unlist(remlist(ty="n", k=0, ll %lt% 2, l1 %lt% 2))[]4
unlist(remlist(ty="n", k=0, ll %lt% 2, l1 %lt% 2))[4]
unlist(remlist(ty="n", k=0, ll %lt% 2, l1 %lt% 2))[[1]]
unlist(remlist(ty="n", k=0, ll %lt% 2, l1 %lt% 2))
remlist(ty="n", k=0, ll %lt% 2, l1 %lt% 2)
remlist(ty="n", k=0, ll %lt% 2, l1 %lt% 2)]
remlist(ty="n", k=0, ll %lt% 2, l1 %lt% 2)[1]
remlist(ty="n", k=0, ll %lt% 2, l1 %lt% 2)[[1]]
remlist(ty="n", k=0, ll %lt% 2, l1 %lt% 2)[1]
names(remlist(ty="n", k=0, ll %lt% 2, l1 %lt% 2)[1])
names(remlist(ty="n", k=0, ll %lt% 2, l1 %lt% 2)[3])
names(remlist(ty="n", k=0, ll %lt% 2, l1 %lt% 2)[3]) == ""
names(remlist(ty="n", k=0, ll %lt% 2, l1 %lt% 2)[1]) == ""
1:length(remlist(ty="n", k=0, ll %lt% 2, l1 %lt% 2))
remlist(ty="n", k=0, ll %lt% 2, l1 %lt% 2)[[2]]
remlist(ty="n", k=0, ll %lt% 2, l1 %lt% 2)[[1]]
remlist(ty="n", k=0, ll %lt% 2, l1 %lt% 2)[[3]]
library(aRangodb)
remlist(ty="n", k=0, ll %lt% 2, l1 %lt% 2)[[3]]
remlist(ty="n", k=0, ll %lt% 2, l1 %lt% 2)[[3]][1]
grepl(remlist(ty="n", k=0, ll %lt% 2, l1 %lt% 2)[[3]], "<")
grepl(remlist(ty="n", k=0, ll %lt% 2, l1 %lt% 2)[[3]], ">")
grep(remlist(ty="n", k=0, ll %lt% 2, l1 %lt% 2)[[3]], ">")
grepl(remlist(ty="n", k=0, ll %lt% 2, l1 %lt% 2)[[3]], ">", fixed = TRUE)
grepl(remlist(ty="n", k=0, ll %lt% 2, l1 %lt% 2)[[3]], ">", fixed = FALSE)
.check_numeric_value <- function(value){
if(!is.numeric(value)){
stop("the value must be numeric")
}
return(value)
}
`>.` <- function(expr, value) {
return(paste0(substitute(expr)," < ",toString(.check_numeric_value(value))))
}
c >. 2
c `>.` 2
library(aRangodb)
library(aRangodb)
library(aRangodb)
library(aRangodb)
source('~/arango-driver/tests/testthat/test_graph.R')
library(aRangodb)
library(aRangodb)
source('~/arango-driver/tests/testthat/test_aql.R')
library(aRangodb)
library(aRangodb)
library(aRangodb)
graphTest <- knewdb %>% aRangodb::graph(name = "kode")
kdefault
graphTest <- kdefault %>% aRangodb::graph(name = "kode")
graphTest$getName()
graphTest$getId()
library(aRangodb)
graphTest <- kdefault %>% aRangodb::graph(name = "kode")
library(aRangodb)
graphTest <- kdefault %>% aRangodb::graph(name = "kode")
library(aRangodb)
graphTest <- kdefault %>% aRangodb::graph(name = "kode")
library(aRangodb)
graphTest <- kdefault %>% aRangodb::graph(name = "kode")
graphTest$getId()
library(aRangodb)
graphTest <- kdefault %>% aRangodb::graph(name = "kode")
library(aRangodb)
graphTest <- kdefault %>% aRangodb::graph(name = "kode")
library(aRangodb)
graphTest <- kdefault %>% aRangodb::graph(name = "kode")
library(aRangodb)
graphTest <- kdefault %>% aRangodb::graph(name = "kode")
graphTest$getId()
graphTest$getRevision()
library(aRangodb)
library(aRangodb)
graphTest <- kdefault %>% aRangodb::graph(name = "kodezz", createOnFail = T)
library(aRangodb)
graphTest %>% aRangodb::drop()
graphTest %>% aRangodb::drop()
library(network)
install.packages("network")
library(network)
network(rgraph(10, mode = "graph", tprob = 0.5), directed = FALSE)
install.packages("sna")
network(rgraph(10, mode = "graph", tprob = 0.5), directed = FALSE)
library(sna)
network(rgraph(10, mode = "graph", tprob = 0.5), directed = FALSE)
n <- network(rgraph(10, mode = "graph", tprob = 0.5), directed = FALSE)
n$mel
n$gal
n$val
n$iel
n$oel
install.packages("ggnetwork")
install.packages("GGally")
library(GGally)
install.packages("ggplot2")
library(GGally)
class("s")
"mm" in c("c", "d")
"mm" %in% c("c", "d")
testC <- c(c(1,2), c(1))
testC
testC <- c(list(1,2), list(1))
testC
edge <- list(from = c(1,2), to = c(1))
edge
edge$from <- c(edge$from, 2)
testC
edge
edge$pippo
edge$from
library(aRangodb)
rm(delete)
rm(aql)
rm(documents)
rm(execute())
rm(execute
)
rm(filter)
rm(insert)
rm(set)
rm(unset)
rm(drop)
graphTest <- kdefault %>% aRangodb::graph(name = "kodezz", createOnFail = T)
library(aRangodb)
graphTest <- kdefault %>% aRangodb::graph(name = "kodezz", createOnFail = T)
library(aRangodb)
graphTest <- kdefault %>% aRangodb::graph(name = "kodezz", createOnFail = T)
library(magrittr)
graphTest <- kdefault %>% aRangodb::graph(name = "kodezz", createOnFail = T)
library(jsonlite)
library(httr)
library(R6)
library(magrittr)
graphTest <- kdefault %>% aRangodb::graph(name = "kodezz", createOnFail = T)
graphTest
graphTest <- kdefault %>% aRangodb::graph(name = "kode", createOnFail = T)
graphTest
graphTest$getEdgeDefinitions()
graphTest$getEdgeDefinitions()$has_skill
graphTest$getEdgeDefinitions()$has_skill[[1]]
graphTest$getEdgeDefinitions()$has_skill$from
graphTest$getEdgeDefinitions()$has_skill$to
graphTest$getEdgeDefinitions()
library(aRangodb)
graphTest <- kdefault %>% aRangodb::graph(name = "kode", createOnFail = T)
graphTest$getEdgeDefinitions()
graphTest
graphTest$.__enclos_env__$private$verticies
graphTest$.__enclos_env__$private$verticies[1]
unlist(c(1,2))
library(aRangodb)
graphTest <- kdefault %>% aRangodb::graph(name = "kode", createOnFail = T)
graphTest
graphTest <- kdefault %>% aRangodb::graph(name = "kodezz", createOnFail = T)
graphTest <- graphTest %>% aRangodb::edge_definition("employee", "has", "soft_skill")
library(aRangodb)
graphTest <- graphTest %>% aRangodb::edge_definition("employee", "has", "soft_skill")
graphTest <- graphTest %>% aRangodb::edge_definition("employee", "has", "soft_skill")
library(aRangodb)
graphTest <- graphTest %>% aRangodb::edge_definition("employee", "has", "soft_skill")
graphTest
graphTest$.__enclos_env__$private$edges
graphTest <- graphTest %>% aRangodb::edge_definition("soft_skill", "has", "requirement")
graphTest$.__enclos_env__$private$edges
library(aRangodb)
graphTest <- graphTest %>% aRangodb::drop()
graphTest <- kdefault %>% aRangodb::graph(name = "kodezz", createOnFail = T)
graphTest$.__enclos_env__$private$edges
graphTest <- graphTest %>% aRangodb::edge_definition("employee", "has", "soft_skill")
graphTest <- graphTest %>% aRangodb::edge_definition("soft_skill", "has", "requirement")
graphTest$.__enclos_env__$private$edges
library(aRangodb)
graphTest <- graphTest %>% aRangodb::drop()
graphTest <- kdefault %>% aRangodb::graph(name = "kodezz", createOnFail = T)
graphTest <- graphTest %>% aRangodb::edge_definition("employee", "has", "soft_skill")
graphTest <- graphTest %>% aRangodb::edge_definition("soft_skill", "has", "requirement")
graphTest$.__enclos_env__$private$edges
library(aRangodb)
graphTest <- graphTest %>% aRangodb::drop()
graphTest <- kdefault %>% aRangodb::graph(name = "kodezz", createOnFail = T)
graphTest <- graphTest %>% aRangodb::edge_definition("employee", "has", "soft_skill")
graphTest <- graphTest %>% aRangodb::edge_definition("soft_skill", "has", "requirement")
graphTest$.__enclos_env__$private$edges
detach("package:aRangodb", unload=TRUE)
library("aRangodb", lib.loc="/usr/local/lib/R/site-library")
library(aRangodb)
graphTest <- graphTest %>% aRangodb::drop()
graphTest <- kdefault %>% aRangodb::graph(name = "kodezz", createOnFail = T)
graphTest <- graphTest %>% aRangodb::edge_definition("employee", "has", "soft_skill")
library(aRangodb)
graphTest <- graphTest %>% aRangodb::drop()
graphTest <- kdefault %>% aRangodb::graph(name = "kodezz", createOnFail = T)
graphTest <- graphTest %>% aRangodb::edge_definition("employee", "has", "soft_skill")
graphTest
graphTest <- graphTest %>% aRangodb::edge_definition("soft_skill", "has", "requirement")
graphTest
graphTest$.__enclos_env__$private$edges
graphTest$getEdgeDefinitions()
graphTest$getEdgeDefinitions()$has
library(aRangodb)
graphTest <- graphTest %>% aRangodb::drop()
graphTest <- kdefault %>% aRangodb::graph(name = "kodezz", createOnFail = T)
graphTest <- graphTest %>% aRangodb::edge_definition("soft_skill", "has", "requirement")
soft_skill_coll <- kdefault %>% aRangodb::collection(name="soft_skill")
doc <- soft_skill_coll %>% insert("math2") %>% set(name="math2") %>% execute()
c(list(from="1", to="2"), list(from="1", to="3"))
testC <- c(list(from="1", to="2"), list(from="1", to="3"))
testC[[1]]
testC[[3]]
testC[[4]]
testC[1]
testC <- list(list(from="1", to="2"), list(from="1", to="3"))
testC[[1]]
testC[[2]]
length(testC)
length(testC[[1]])
testC <- list(list(from="1", to="2"), list(from="1", to="3"))
length(testC[[1]][1])
testC[[1]][1]
testC[[1]][2]
testC[[2]][2]
testC[[2]][1]
testC[[2]]$from
testC[[2]]$to
library(aRangodb)
employeesCollection <- kdefault %>% aRangodb::collection(name = "employee")
skillCollection <- kdefault %>% aRangodb::collection(name = "skill")
skillCollection
employees <- employeesCollection %>% aRangodb::documents()
employees
employees$elena.campani
skills <- skillCollection %>% aRangodb::documents()
skills$computer_science$getValues()
edge_def <- aRangodb::edge(employees$gabriele.galatolo %->% skills$statistics)
library(aRangodb)
edge_def <- aRangodb::edge(employees$gabriele.galatolo %->% skills$statistics)
source('~/arango-driver/R/arango_common_operators.R')
edge_def <- aRangodb::edge(employees$gabriele.galatolo %->% skills$statistics)
library(aRangodb)
edge_def <- aRangodb::edge(employees$gabriele.galatolo %->% skills$statistics)
detach("package:aRangodb", unload=TRUE)
library("aRangodb", lib.loc="/usr/local/lib/R/site-library")
library(aRangodb)
edge_def <- aRangodb::edge(employees$gabriele.galatolo %->% skills$statistics)
employees <- employeesCollection %>% aRangodb::documents()
skills <- skillCollection %>% aRangodb::documents()
edge_def <- aRangodb::edge(employees$gabriele.galatolo %->% skills$statistics)
library(aRangodb)
edge_def <- aRangodb::edge(employees$gabriele.galatolo %->% skills$statistics)
edge_def$`_from`
edge_def <- aRangodb::edge(employees$gabriele.galatolo %<-% skills$statistics)
edge_def$`_from`
edge_def <- aRangodb::edge(employees$gabriele.galatolo %->% skills$statistics, result="30L")
edge_def$result
edge_def <- aRangodb::edge(employees$gabriele.galatolo %->% skills$statistics, result="30L", isnull)
edge_def <- aRangodb::edge(employees$gabriele.galatolo %->% skills$statistics, result="30L", 3)
edge_def
library(aRangodb)
edge_def <- aRangodb::edge(employees$gabriele.galatolo %->% skills$statistics, result="30L", 3)
edge_def
1:2
1:3
1:4
c(1:4)
library(aRangodb)
edge_def <- aRangodb::edge(employees$gabriele.galatolo %->% skills$statistics, result="30L", 3)
library(aRangodb)
edge_def <- aRangodb::edge(employees$gabriele.galatolo %->% skills$statistics, result="30L", 3)
edge_def[3]
edge_def[2]
names(edge_def[2])
library(aRangodb)
edge_def <- aRangodb::edge(employees$gabriele.galatolo %->% skills$statistics, result="30L", 3)
edge_def[2] <- NULL
edge_def
library(aRangodb)
edge_def <- aRangodb::edge(employees$gabriele.galatolo %->% skills$statistics, result="30L", 3)
library(aRangodb)
edge_def <- aRangodb::edge(employees$gabriele.galatolo %->% skills$statistics, result="30L", 3)
library(aRangodb)
edge_def <- aRangodb::edge(employees$gabriele.galatolo %->% skills$statistics, result="30L", 3)
names(edge_def[2]) == ""
library(aRangodb)
edge_def <- aRangodb::edge(employees$gabriele.galatolo %->% skills$statistics, result="30L", 3)
library(aRangodb)
edge_def <- aRangodb::edge(employees$gabriele.galatolo %->% skills$statistics, result="30L", 3)
source('~/arango-driver/R/arango_common_operators.R')
edge_def <- aRangodb::edge(employees$gabriele.galatolo %->% skills$statistics, result="30L", 3)
library(aRangodb)
edge_def <- aRangodb::edge(employees$gabriele.galatolo %->% skills$statistics, result="30L", 3)
edge_def
edge_def[[1]]
library(aRangodb)
edge_def <- aRangodb::edge(employees$gabriele.galatolo %->% skills$statistics, result="30L", 3)
edge_def
library(aRangodb)
edge_def <- aRangodb::edge(employees$gabriele.galatolo %->% skills$statistics, result="30L", 3)
library(aRangodb)
edge_def <- aRangodb::edge(employees$gabriele.galatolo %->% skills$statistics, result="30L", 3)
library(aRangodb)
edge_def <- aRangodb::edge(employees$gabriele.galatolo %->% skills$statistics, result="30L", 3)
library(aRangodb)
edge_def <- aRangodb::edge(employees$gabriele.galatolo %->% skills$statistics, result="30L", 3)
edge_def
library(aRangodb)
edge_def <- aRangodb::edge(employees$gabriele.galatolo %->% skills$statistics, result="30L", 3)
edge_def
list(edge_def)
length(list(edge_def))
library(aRangodb)
library(aRangodb)
rm(testC)
rm(soft_skill_coll)
rm(res)
rm(newDoc)
rm(net)
rm(n)
rm(spring-spring_demo)
rm(spring_demo)
rm(doc)
rm(e)
rm(arguments)
rm(dbs)
rm(edge_def)
rm(knewcoll)
rm(graphTest)
kodezz <- kdefault %>% graph("kodezz")
kodezz$getEdgeDefinitions()
install.packages("roxygen2")
install.packages("roxygen2")
devtools::document()
library(aRangodb)
source('~/arango-driver/examples/arango_full_example.R')
source('~/arango-driver/examples/arango_full_example.R')
source('~/arango-driver/examples/arango_full_example.R')
source('~/arango-driver/examples/arango_full_example.R')
source('~/arango-driver/examples/arango_full_example.R')
source('~/arango-driver/examples/arango_full_example.R')
source('~/arango-driver/examples/arango_full_example.R')
source('~/arango-driver/examples/arango_full_example.R')
source('~/arango-driver/examples/arango_full_example.R')
source('~/arango-driver/examples/arango_full_example.R')
source('~/arango-driver/examples/arango_full_example.R')
source('~/arango-driver/examples/arango_full_example.R')
source('~/arango-driver/examples/arango_full_example.R')
source('~/arango-driver/examples/arango_full_example.R')
source('~/arango-driver/examples/arango_full_example.R')
debugSource('~/arango-driver/examples/arango_full_example.R')
residenceGraph
source('~/arango-driver/examples/arango_full_example.R')
source('~/arango-driver/examples/arango_full_example.R')
source('~/arango-driver/examples/arango_full_example.R')
library(aRangodb)
source('~/arango-driver/examples/arango_full_example.R')
library(aRangodb)
library(aRangodb)
source('~/arango-driver/examples/arango_full_example.R')
source('~/arango-driver/examples/arango_full_example.R')
source('~/arango-driver/examples/arango_full_example.R')
source('~/arango-driver/examples/arango_full_example.R')
source('~/arango-driver/examples/arango_full_example.R')
library(aRangodb)
source('~/arango-driver/examples/arango_full_example.R')
library(aRangodb)
source('~/arango-driver/examples/arango_full_example.R')
source('~/arango-driver/examples/arango_full_example.R')
View(`%:%`)
library(aRangodb)
source('~/arango-driver/examples/arango_full_example.R')
library(jsonlite)
library(httr)
library(R6)
library(magrittr)
source('~/arango-driver/examples/arango_full_example.R')
library(aRangodb)
source('~/arango-driver/R/arango_common_operators.R')
source('~/arango-driver/examples/arango_full_example.R')
library(httr)
library(jsonlite)
library(httr)
library(R6)
library(aRangodb)
